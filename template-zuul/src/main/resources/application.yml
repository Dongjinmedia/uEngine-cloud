server:
  port: 8080
  servlet:
    context-path: /

logging:
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} ${LOG_LEVEL_PATTERN:-%5p} %m%n"

---
spring:
  profiles: local
  cloud:
    stream:
      kafka:
        binder:
          brokers: 52.79.164.208:9092
      bindings:
        billing-sub:
          group: ${spring.application.name}
          destination: billing
        metering-pub:
          destination: metering

eureka:
  client:
    registry-fetch-interval-seconds: 5
    register-with-eureka: true
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/
    healthcheck:
      enabled: true
  instance:
    leaseRenewalIntervalInSeconds: 5
    leaseExpirationDurationInSeconds: 5
    statusPageUrlPath: ${server.servlet.context-path}info
    healthCheckUrlPath: ${server.servlet.context-path}health
    metadataMap:
        deployment: local
        profile: local
        appType: zuul

zuul:
  ignored-headers: Access-Control-Allow-Credentials, Access-Control-Allow-Origin
  addProxyHeaders: true
  # Decides to check the token.
  iam-authentication: true
  # Key to determine if the token's signature is correct.
  # It must be the same key that IAM used to issue the token.
  # Copy and paste from your IAM's iam.jwt.key
  iam-jwt-key: my-jwt-encrypt-key-my-jwt-encrypt-key

  # 메타데이터 암호화 키
  metadata-encoder-secret1: Bar12345Bar12345
  metadata-encoder-secret2: ThisIsASecretKet

  # 복호화 할 메타데이터 필드.
  secure-metadata-fields:
    - "$.gitlabToken"

  # 레디스 저장소
  redis:
    host: redis.pas-mini.io
    port: 6379

  billing:
    enable: true
    url: "http://billing.pas-mini.io"
    authentication: "Basic YmlsbGluZ0B1ZW5naW5lLm9yZzoxODkyNXVuZw=="
    organization: "562980b6-9ad6-4257-b276-a38825522f69"

  routes:
    definition:
      path: /definition/**
      serviceId: definition
      stripPrefix: false
      iam-scopes:
        - guest/GET
        - cloud-server/PUT-PATCH-POST-DELETE
      billing-plans:
        - guest/GET
        - PRD_0000000007_PL_000001/PUT-PATCH-POST-DELETE
        - PRD_0000000007_PL_000002/PUT-PATCH-POST-DELETE

#### proxies for reverse engineering and java code generation ###
    gitlab:
      url: http://gitlab.pas-mini.io/api/v4/
      stripPrefix: true
      addHeader:
        PRIVATE-TOKEN: "$.gitlabToken"

  usages:
    - path: /definition/**
      billing-plans:
       - PRD_0000000008_PL_000001/*
      unit: instance
      when:
       - 200
       - 201

  ratelimit:
    key-prefix: your-prefix
    enabled: true
    repository: REDIS
    behind-proxy: true
    default-policy-list: #optional - will apply unless specific policy exists
      - limit: 10 #optional - request number limit per refresh interval window
        quota: 1000 #optional - request time limit per refresh interval window (in seconds)
        refresh-interval: 60 #default value (in seconds)
        type: #optional
          - user
          - origin
          - url
    policy-list:
      definition:
        - limit: 5 #optional - request number limit per refresh interval window
          quota: 1000 #optional - request time limit per refresh interval window (in seconds)
          refresh-interval: 60 #default value (in seconds)
          type: #optional
            - user
            - origin
            - url
      definition2:
        - limit: 10 #optional - request number limit per refresh interval window
          quota: 1000 #optional - request time limit per refresh interval window (in seconds)
          refresh-interval: 60 #default value (in seconds)
          type: #optional
            - user
            - origin
            - url

---
spring:
  profiles: dev,stg,prod

eureka:
  client:
    registry-fetch-interval-seconds: 5
    register-with-eureka: true
    serviceUrl:
      defaultZone: http://${vcap.services.eureka-server.internal}/eureka/
    healthcheck:
      enabled: true
  instance:
    leaseRenewalIntervalInSeconds: 5
    leaseExpirationDurationInSeconds: 5
    hostname: ${HOST}
    nonSecurePort: ${PORT}
    preferIpAddress: false
    statusPageUrl: http://${eureka.instance.hostname}:${eureka.instance.nonSecurePort}/info
    healthCheckUrl: http://${eureka.instance.hostname}:${eureka.instance.nonSecurePort}/health
    homePageUrl: http://${eureka.instance.hostname}:${eureka.instance.nonSecurePort}/
    instanceId: ${HOST}:${spring.application.name}:${PORT}
    metadataMap:
        project: ${CI_PROJECT_NAME}
        commitSha: ${CI_COMMIT_SHA}
        image: ${MARATHON_APP_DOCKER_IMAGE}
        deployment: ${DEPLOYMENT}
        profile: ${PROFILE}
        appType: zuul
        appname: ${APP_NAME}
